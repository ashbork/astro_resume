---
export interface Props {
    language: "en" | "pl";
}
---

<div
    class="absolute top-0 right-0 bg-overlay w-24 h-10 flex rounded-bl dark:bg-dark-overlay bg-light-overlay shadow-md"
>
    <!--Download button with dropdown menu-->
    <button
        class="m-auto hover:text-light-rose hover:dark:text-dark-rose transition-colors duration-200 ease-in-out"
        id="download-button"
        title="Download resume"
        data-target="#download-dropdown"
    >
        <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6 print:hidden hover:text-light-rose hover:dark:text-dark-rose duration-200 ease-in-out"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3"
            ></path>
        </svg>
        <div
            class="hidden absolute top-12 right-14 text-light-text dark:text-dark-text bg-light-highlightHigh dark:bg-dark-highlightHigh rounded-md shadow-lg z-10"
            id="download-dropdown"
        >
            <a
                href="/astro_resume/en.pdf"
                class="rounded-md block px-4 py-2 text-sm hover:bg-light-highlightLow dark:hover:bg-dark-highlightLow transition-colors duration-200 ease-in-out"
                >EN</a
            >
            <a
                href="/astro_resume/pl.pdf"
                class="rounded-md block px-4 py-2 text-sm hover:bg-light-highlightLow dark:hover:bg-dark-highlightLow transition-colors duration-200 ease-in-out"
                >PL</a
            >
        </div>
    </button>

    <script>
        let downloadButton = document.getElementById("download-button");
        let downloadDropdown = document.getElementById("download-dropdown");
        downloadButton.addEventListener("click", () => {
            downloadDropdown.classList.toggle("hidden");
        });
        document.body.addEventListener("click", (e) => {
            if (
                !downloadButton.contains(e.target) &&
                !downloadDropdown.contains(e.target)
            ) {
                downloadDropdown.classList.add("hidden");
            }
        });
    </script>
    <!--Toggle for language -->
    <button
        class="m-auto hover:text-light-rose hover:dark:text-dark-rose transition-colors duration-200 ease-in-out"
        id="language-toggle"
        title="Toggle language"
    >
        <script is:inline defer>
            const toggleLanguage = () => {
                console.log("toggling");
                switch (localStorage.getItem("lang")) {
                    case "en": {
                        console.log("switched to pl");
                        localStorage.lang = "pl";
                        break;
                    }
                    case "pl": {
                        console.log("switched to en");
                        localStorage.lang = "en";
                        break;
                    }
                    case null: {
                        console.log("switched to en");
                        localStorage.lang = "en";
                        break;
                    }
                }
                console.log(window.location.pathname);
                window.location.pathname = window.location.pathname.slice(
                    0,
                    -3
                );
                // This doesn't feel right
            };

            let langToggle = document.getElementById("language-toggle");
            langToggle.addEventListener("click", toggleLanguage);
        </script>
        <!-- language icon  -->
        <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6 print:hidden duration-200 ease-in-out"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M10.5 21l5.25-11.25L21 21m-9-3h7.5M3 5.621a48.474 48.474 0 016-.371m0 0c1.12 0 2.233.038 3.334.114M9 5.25V3m3.334 2.364C11.176 10.658 7.69 15.08 3 17.502m9.334-12.138c.896.061 1.785.147 2.666.257m-4.589 8.495a18.023 18.023 0 01-3.827-5.802"
            ></path>
        </svg>
    </button>
    <!--Toggle for dark mode-->
    <button
        class="m-auto"
        id="darkmode-toggle hover:text-light-rose hover:dark:text-dark-rose transition-colors duration-200 ease-in-out"
        title="Toggle theme"
    >
        <script is:inline defer>
            if (
                localStorage.theme === "dark" ||
                (!("theme" in localStorage) &&
                    window.matchMedia("(prefers-color-scheme: dark)").matches)
            ) {
                document.documentElement.classList.add("dark");
                localStorage.theme = "dark";
            } else {
                document.documentElement.classList.remove("dark");
                localStorage.theme = "light";
            }
            const switchThemeIcon = () => {
                console.log("ran switchThemeIcon");
                let themeIcon = document.getElementById("theme-icon");
                switch (localStorage.theme) {
                    case "dark": {
                        themeIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />`;
                        themeIcon.setAttribute("stroke-width", "");
                        themeIcon.setAttribute("fill", "currentColor");
                        console.log("icon switched to dark");

                        break;
                    }
                    case "light": {
                        themeIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />`;
                        themeIcon.setAttribute("stroke-width", "1.5");
                        themeIcon.setAttribute("stroke", "currentColor");
                        themeIcon.setAttribute("fill", "none");
                        console.log("icon switched to light");
                        break;
                    }
                }
            };

            const toggleMode = () => {
                console.log("toggling");
                switch (localStorage.theme) {
                    case "dark": {
                        console.log("switched to light");
                        document.documentElement.classList.remove("dark");
                        localStorage.theme = "light";
                        break;
                    }
                    case "light": {
                        console.log("switched to dark");
                        document.documentElement.classList.add("dark");
                        localStorage.theme = "dark";
                        break;
                    }
                }
                setTimeout(switchThemeIcon, 200);
            };
            document.addEventListener("DOMContentLoaded", switchThemeIcon);
            let darkmodeToggle = document.getElementById("darkmode-toggle");
            darkmodeToggle.addEventListener("click", toggleMode);
        </script>
        <svg
            class="w-6 h-6 text-light-text dark:text-dark-text hover:text-light-rose hover:dark:text-dark-rose transition-colors duration-200 ease-in-out print:hidden"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            id="theme-icon"
        >
        </svg>
    </button>
</div>
